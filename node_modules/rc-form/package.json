{
  "_args": [
    [
      {
        "raw": "rc-form@~1.0.0",
        "scope": null,
        "escapedName": "rc-form",
        "name": "rc-form",
        "rawSpec": "~1.0.0",
        "spec": ">=1.0.0 <1.1.0",
        "type": "range"
      },
      "E:\\reactnews\\node_modules\\antd"
    ]
  ],
  "_from": "rc-form@>=1.0.0 <1.1.0",
  "_id": "rc-form@1.0.1",
  "_inCache": true,
  "_location": "/rc-form",
  "_nodeVersion": "4.4.5",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/rc-form-1.0.1.tgz_1476190808137_0.9166471234057099"
  },
  "_npmUser": {
    "name": "yiminghe",
    "email": "yiminghe@gmail.com"
  },
  "_npmVersion": "3.9.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rc-form@~1.0.0",
    "scope": null,
    "escapedName": "rc-form",
    "name": "rc-form",
    "rawSpec": "~1.0.0",
    "spec": ">=1.0.0 <1.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/antd"
  ],
  "_resolved": "https://registry.npmjs.org/rc-form/-/rc-form-1.0.1.tgz",
  "_shasum": "f1186a627895701c7ebfe0b5f8e4206246e132bc",
  "_shrinkwrap": null,
  "_spec": "rc-form@~1.0.0",
  "_where": "E:\\reactnews\\node_modules\\antd",
  "author": {
    "name": "yiminghe@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/react-component/form/issues"
  },
  "config": {
    "port": 8000
  },
  "dependencies": {
    "async-validator": "1.x",
    "babel-runtime": "6.x",
    "dom-scroll-into-view": "1.x",
    "hoist-non-react-statics": "1.x",
    "warning": "^3.0.0"
  },
  "description": "React High Order Form Component",
  "devDependencies": {
    "antd": "1.x",
    "async": "^1.5.2",
    "expect.js": "0.3.x",
    "history": "^1.16.0",
    "pre-commit": "1.x",
    "rc-tools": "5.x",
    "react": "15.x",
    "react-addons-test-utils": "15.x",
    "react-data-binding": "^0.4.0",
    "react-dom": "15.x",
    "react-redux": "^4.0.0",
    "react-router": "^1.0.2",
    "redux": "^3.0.4"
  },
  "directories": {},
  "dist": {
    "shasum": "f1186a627895701c7ebfe0b5f8e4206246e132bc",
    "tarball": "https://registry.npmjs.org/rc-form/-/rc-form-1.0.1.tgz"
  },
  "files": [
    "lib",
    "dist",
    "assets/*.css"
  ],
  "gitHead": "616ddd309d9ede65c652c3a158f7e1b08b9e8d1e",
  "homepage": "https://github.com/react-component/form",
  "keywords": [
    "react",
    "react-component",
    "react-form",
    "form"
  ],
  "license": "MIT",
  "main": "./lib/index",
  "maintainers": [
    {
      "name": "yiminghe",
      "email": "yiminghe@gmail.com"
    }
  ],
  "name": "rc-form",
  "optionalDependencies": {},
  "pre-commit": [
    "lint"
  ],
  "readme": "# rc-form\n\nReact High Order Form Component.\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![gemnasium deps][gemnasium-image]][gemnasium-url]\n[![node version][node-image]][node-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: http://img.shields.io/npm/v/rc-form.svg?style=flat-square\n[npm-url]: http://npmjs.org/package/rc-form\n[travis-image]: https://img.shields.io/travis/react-component/form.svg?style=flat-square\n[travis-url]: https://travis-ci.org/react-component/form\n[coveralls-image]: https://img.shields.io/coveralls/react-component/form.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/react-component/form?branch=master\n[gemnasium-image]: http://img.shields.io/gemnasium/react-component/form.svg?style=flat-square\n[gemnasium-url]: https://gemnasium.com/react-component/form\n[node-image]: https://img.shields.io/badge/node.js-%3E=_0.10-green.svg?style=flat-square\n[node-url]: http://nodejs.org/download/\n[download-image]: https://img.shields.io/npm/dm/rc-form.svg?style=flat-square\n[download-url]: https://npmjs.org/package/rc-form\n\n## Development\n\n```\nnpm install\nnpm start\n```\n\n## Example\n\nhttp://localhost:8000/examples/\n\nonline example: http://react-component.github.io/form/examples/\n\n## Feature\n\n* support reactjs and even react-native\n\n## Install\n\n[![rc-form](https://nodei.co/npm/rc-form.png)](https://npmjs.org/package/rc-form)\n\n## Usage\n\n```js\nimport { createForm } from 'rc-form';\n\nclass Form extends React.Component {\n  submit = () => {\n    this.props.form.validateFields((error, value) => {\n      console.log(error, value);\n    });\n  }\n\n  render() {\n    let errors;\n    const { getFieldProps, getFieldError } = this.props.form;\n    return (<div>\n      <input {...getFieldProps('normal')}/>\n      <input {...getFieldProps('required', {\n        onChange(){}, // have to write original onChange here if you need\n        rules: [{required: true}],\n      })}/>\n      {(errors = getFieldError('required')) ? errors.join(',') : null}\n      <button onClick={this.submit}>submit</button>\n    </div>)\n  }\n}\n\nexport createForm()(Form);\n```\n\nor a quicker version:\n\n```js\nimport { createForm } from 'rc-form';\n\nclass Form extends React.Component {\n  componentWillMount() {\n    this.requiredDecorator = this.props.form.getFieldDecorator({\n        name: 'required',\n        rules: [{required: true}],\n    });\n  },\n\n  submit = () => {\n    this.props.form.validateFields((error, value) => {\n      console.log(error, value);\n    });\n  }\n\n  render() {\n    let errors;\n    const { getFieldError } = this.props.form;\n    return (<div>\n      {this.requiredDecorator(\n      <input onChange={\n      // can still write your own onChange }\n      />)}\n      {(errors = getFieldError('required')) ? errors.join(',') : null}\n      <button onClick={this.submit}>submit</button>\n    </div>)\n  }\n}\n\nexport createForm()(Form);\n```\n\n## createForm(formOption): Function\n\n### formOption.validateMessages: Object\n\npreset messages of [async-validator](https://github.com/yiminghe/async-validator)\n\n### formOption.mapProps: Function(props): Object\n\nGet new props transfered to WrappedComponent. Defaults to props=>props.\n\n### formOption.onFieldsChange(props, fields)\n\nCalled when field changed, you can dispatch fields to redux store.\n\n### formOption.mapPropsToFields(props)\n\nconvert value from props to fields. used for read fields from redux store.\n\n### formOption.withRef: boolean\n\nMaintain an ref for wrapped component instance, use `refs.wrappedComponent` to access.\n\ncreateForm() will return another function:\n\n### function(WrappedComponent: React.Component): React.Component\n\nWill pass a object as prop form with the following members to WrappedComponent:\n\n### getFieldProps(name, option): Object\n\nWill create props which can be set on a input/InputComponent which support value and onChange interface.\n\nAfter set, this will create a binding with this input.\n\n```jsx\n<form>\n  <input {...getFieldProps('name', { ...options })} />\n</form>\n```\n\n#### name: String\n\nThis input's unique name.\n\n#### option.exclusive: boolean\n\nwhether set value exclusively. used with radio.\n\n#### option.valuePropName: String\n\nProp name of component's value field, eg: checkbox should be set to `checked` ...\n\n#### option.getValueFromEvent\n\nSpecify how to get value from event. Defaults to\n\n```js\nfunction (e) {\n  if (!e || !e.target) {\n    return e;\n  }\n  const { target } = e;\n  return target.type === 'checkbox' ? target.checked : target.value;\n}\n```\n\n#### option.getValueProps\n\nget the component props according to field value. Defaults to\n\n```js\nfunction (value) {\n  return { value };\n}\n```\n\n#### option.initialValue\n\nInitial value of current component.\n\n#### option.normalize(value, prevValue, allValues)\n\nReturn normalized value \n\n#### option.trigger: String\n\nDefaults to `onChange`. Event which is listened to collect form data.\n\n#### option.validate: Object[]\n\n##### option.validate[n].trigger: String|String[]\n\nEvent which is listened to validate. \nDefaults to `onChange`, set to falsy to only validate when call props.validateFields.\n\n##### option.validate[n].rules: Object[]\n\nValidator rules. see: [async-validator](https://github.com/yiminghe/async-validator)\n\n#### option.validateTrigger && option.rules\n\n```js\n{\n  validateTrigger: 'onBlur',\n  rules: [{required: true}],\n}\n// is the shorthand of\n{\n  validate: [{\n    trigger: 'onBlur',\n    rules: [required: true],\n  }],\n}\n```\n\n#### option.validateFirst: Boolean\n\nDefaults to false. whether stop validate on first rule of error for this field.\n\n#### option.fieldNameProp\n\nWhere to store the `name` argument of `getFieldProps`.\n\n#### option.fieldMetaProp\n\nWhere to store the meta data of `getFieldProps`.\n\n### getFieldDecorator(name:String, option: Object): (React.Node): React.Node\n\nSimilar to `getFieldProps`, but add some helper warnings and you can write onXX directly inside React.Node props:\n\n```jsx\n<form>\n  {getFieldDecorator('name', otherOptions)(<input />)}\n</form>\n```\n\n### getFieldsValue([fieldNames: String[]])\n\nGet fields value by fieldNames.\n\n### getFieldValue(fieldName: String)\n\nGet field value by fieldName.\n\n### getFieldInstance(fieldName: String)\n\nGet field react public instance by fieldName.\n\n### setFieldsValue(obj: Object)\n\nSet fields value by kv object.\n\n### setFieldsInitialValue(obj: Object)\n\nSet fields initialValue by kv object. use for reset and initial display/value.\n\n### setFields(obj: Object)\n\nSet fields by kv object. each field can contain errors and value member.\n\n### validateFields([fieldNames: String[]], [options: Object], callback: Function(errors, values))\n\nValidate and get fields value by fieldNames.\n\noptions is the same as validate method of [async-validator](https://github.com/yiminghe/async-validator).\nAnd add `force` and `scroll`. `scroll` is the same as [dom-scroll-into-view's function parameter `config`](https://github.com/yiminghe/dom-scroll-into-view#function-parameter).\n\n#### options.force: Boolean\n\nDefaults to false. Whether to validate fields which have been validated(caused by validateTrigger).\n\n### getFieldError(name): String[]\n\nGet input's validate errors.\n\n### isFieldValidating(name: String): Bool\n\nWhether this input is validating.\n\n### isFieldsValidating(names: String[]): Bool\n\nWhether one of the inputs is validating.\n\n### isSubmitting(): Bool\n\nWhether the form is submitting.\n\n### submit(callback: Function)\n\nCause isSubmitting to return true, after callback called, isSubmitting return false.\n\n### resetFields([names: String[]])\n\nReset specified inputs. Defaults to all.\n\n\n## rc-form/lib/createDOMForm(formOption): Function\n\ncreateForm enhancement, support props.form.validateFieldsAndScroll\n\n### props.form.validateFieldsAndScroll([fieldNames: String[]], [options: Object], callback: Function(errors, values))\n\nprops.form.validateFields enhancement, support scroll to the first invalid form field\n\n#### options.container: HTMLElement\n\nDefaults to first scrollable container of form field(until document).\n\n\n## Notes\n\n- Do not use stateless function component inside Form component: https://github.com/facebook/react/pull/6534\n\n- you can not set same prop name as the value of validateTrigger/trigger for getFieldProps\n\n```js\n<input {...getFieldProps('change',{\n  onChange: this.iWantToKnow // you must set onChange here or use getFieldDecorator to write inside <input>\n})}>\n```\n\n- you can not use ref prop for getFieldProps\n\n```js\n<input {...getFieldProps('ref')} />\n\nthis.props.form.getFieldInstance('ref') // use this to get ref\n```\n\nor\n\n```js\n<input {...getFieldProps('ref',{\n  ref: this.saveRef // use function here or use getFieldDecorator to write inside <input> (only allow function)\n})} />\n```\n\n## Test Case\n\n```\nnpm test\nnpm run chrome-test\n```\n\n## Coverage\n\n```\nnpm run coverage\n```\n\nopen coverage/ dir\n\n## License\n\nrc-form is released under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/react-component/form.git"
  },
  "scripts": {
    "build": "rc-tools run build",
    "chrome-test": "rc-tools run chrome-test",
    "coverage": "rc-tools run coverage",
    "gh-pages": "rc-tools run gh-pages",
    "karma": "rc-tools run karma",
    "lint": "rc-tools run lint",
    "pub": "webpack --config=scripts/webpack.config.js && rc-tools run pub --babel-runtime",
    "saucelabs": "rc-tools run saucelabs",
    "start": "rc-tools run server",
    "test": "rc-tools run test"
  },
  "version": "1.0.1"
}
